!yamlscript/v0:

:use common: :all
:: workflow-setup()


jobs:

  #----------------------------------------------------------------------------
  canary:
    :: setup-job("gcc" "canary")
    name: canary/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}
    :: runs-on-docker-c4core('${{matrix.img}}')
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: g++-14 , bt: Debug  , bitlinks: shared64 static32, img: 22.04}
          - {std: 11, cxx: g++-14 , bt: Release, bitlinks: shared64 static32, img: 22.04}
          - {std: 20, cxx: g++-14 , bt: Debug  , bitlinks: shared64 static32, img: 22.04}
          - {std: 20, cxx: g++-14 , bt: Release, bitlinks: shared64 static32, img: 22.04}
          - {std: 11, cxx: g++-5  , bt: Debug  , bitlinks: shared64 static32, img: 18.04}
          - {std: 11, cxx: g++-5  , bt: Release, bitlinks: shared64 static32, img: 18.04}
          - {std: 11, cxx: g++-4.8, bt: Debug  , bitlinks: shared64 static32, img: 18.04}
          - {std: 11, cxx: g++-4.8, bt: Release, bitlinks: shared64 static32, img: 18.04}
    env:: load('share/env.yaml')
    steps:
      - :: checkout-manual
      - name: install
        run: c4core-install ${{matrix.cxx}}
      - :: run-steps

  #----------------------------------------------------------------------------
  noexceptions:
    :: setup-job("gcc" "canary")
    name: noexceptions/${{matrix.cxx}}/c++${{matrix.std}}/${{matrix.bt}}
    :: runs-on-docker-c4core('${{matrix.img}}')
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: g++-5, bt: Debug  , bitlinks: shared64 static32, img: 18.04}
          - {std: 11, cxx: g++-5, bt: Release, bitlinks: shared64 static32, img: 18.04}
          - {std: 20, cxx: g++-14, bt: Debug  , bitlinks: shared64 static32, img: 22.04}
          - {std: 20, cxx: g++-14, bt: Release, bitlinks: shared64 static32, img: 22.04}
    env:: load('share/env.yaml')
    steps:
      - :: checkout-manual
      - name: install
        run: c4core-install ${{matrix.cxx}}
      - :: run-steps

  #----------------------------------------------------------------------------
  extended:
    :: setup-job("gcc" "canary")
    name: extended/${{matrix.cxx}}/${{matrix.bits}}bit/c++${{matrix.std}}/vg${{matrix.vg}}
    :: runs-on-docker-c4core('${{matrix.img}}')
    strategy:
      fail-fast: false
      matrix:
        include:
          # with valgrind: only latest gcc
          #                              VALGRIND
          - {std: 11, cxx: 14 , bits: 64, vg: ON , img: 22.04}
          - {std: 11, cxx: 14 , bits: 32, vg: ON , img: 22.04}
          - {std: 14, cxx: 14 , bits: 64, vg: ON , img: 22.04}
          - {std: 14, cxx: 14 , bits: 32, vg: ON , img: 22.04}
          - {std: 17, cxx: 14 , bits: 64, vg: ON , img: 22.04}
          - {std: 17, cxx: 14 , bits: 32, vg: ON , img: 22.04}
          - {std: 20, cxx: 14 , bits: 64, vg: ON , img: 22.04}
          - {std: 20, cxx: 14 , bits: 32, vg: ON , img: 22.04}
          # without valgrind
          - {std: 11, cxx: 13 , bits: 64, vg: OFF, img: 22.04}
          - {std: 11, cxx: 13 , bits: 32, vg: OFF, img: 22.04}
          - {std: 11, cxx: 13 , bits: 64, vg: OFF, img: 22.04}
          - {std: 11, cxx: 13 , bits: 32, vg: OFF, img: 22.04}
          - {std: 11, cxx: 11 , bits: 64, vg: OFF, img: 22.04}
          - {std: 11, cxx: 11 , bits: 32, vg: OFF, img: 22.04, extra_flags: -Wno-stringop-overflow}
          - {std: 11, cxx: 10 , bits: 64, vg: OFF, img: 22.04}
          - {std: 11, cxx: 10 , bits: 32, vg: OFF, img: 22.04}
          - {std: 11, cxx: 9  , bits: 64, vg: OFF, img: 22.04}
          - {std: 11, cxx: 9  , bits: 32, vg: OFF, img: 22.04}
          - {std: 11, cxx: 8  , bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 8  , bits: 32, vg: OFF, img: 18.04}
          - {std: 11, cxx: 7  , bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 7  , bits: 32, vg: OFF, img: 18.04}
          - {std: 11, cxx: 6  , bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 6  , bits: 32, vg: OFF, img: 18.04}
          - {std: 11, cxx: 5  , bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 5  , bits: 32, vg: OFF, img: 18.04}
          - {std: 11, cxx: 4.9, bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 4.9, bits: 32, vg: OFF, img: 18.04}
          - {std: 11, cxx: 4.8, bits: 64, vg: OFF, img: 18.04}
          - {std: 11, cxx: 4.8, bits: 32, vg: OFF, img: 18.04}
    env:: load('share/env.yaml')
    steps:
      - :: checkout-manual
      - name: install
        run: c4core-install g++-${{matrix.cxx}}
      - :: run-gcc-manual-with-flags('Debug'                '-m${{matrix.bits}} ${{matrix.extra_flags}}')
      - :: run-gcc-manual-with-flags('Release' '-O1 -DNDEBUG -m${{matrix.bits}} ${{matrix.extra_flags}}')
      - :: run-gcc-manual-with-flags('Release' '-O2 -DNDEBUG -m${{matrix.bits}} ${{matrix.extra_flags}}')
      - :: run-gcc-manual-with-flags('Release' '-O3 -DNDEBUG -m${{matrix.bits}} ${{matrix.extra_flags}}')
      - :: run-gcc-manual-with-flags('Release' '-Os -DNDEBUG -m${{matrix.bits}} ${{matrix.extra_flags}}')

  #----------------------------------------------------------------------------
  gccsan:
    :: setup-job("gcc" "gccsan")
    name: ${{matrix.bt}}/${{matrix.cxx}}/c++${{matrix.std}}
    :: runs-on-docker-c4core('22.04')
    strategy:
      fail-fast: false
      matrix:
        include:
          - {std: 11, cxx: g++-14, bt: asan, bitlinks: static64}
          - {std: 14, cxx: g++-14, bt: asan, bitlinks: static64}
          - {std: 17, cxx: g++-14, bt: asan, bitlinks: static64}
          - {std: 20, cxx: g++-14, bt: asan, bitlinks: static64}
          - {std: 11, cxx: g++-14, bt: lsan, bitlinks: static64}
          - {std: 14, cxx: g++-14, bt: lsan, bitlinks: static64}
          - {std: 17, cxx: g++-14, bt: lsan, bitlinks: static64}
          - {std: 20, cxx: g++-14, bt: lsan, bitlinks: static64}
          - {std: 11, cxx: g++-14, bt: tsan, bitlinks: static64}
          - {std: 14, cxx: g++-14, bt: tsan, bitlinks: static64}
          - {std: 17, cxx: g++-14, bt: tsan, bitlinks: static64}
          - {std: 20, cxx: g++-14, bt: tsan, bitlinks: static64}
          - {std: 11, cxx: g++-14, bt: ubsan, bitlinks: static64}
          - {std: 14, cxx: g++-14, bt: ubsan, bitlinks: static64}
          - {std: 17, cxx: g++-14, bt: ubsan, bitlinks: static64}
          - {std: 20, cxx: g++-14, bt: ubsan, bitlinks: static64}
    env:: load('share/env.yaml')
    steps:
      - :: checkout-action-docker
      - name: install
        run: c4core-install ${{matrix.cxx}}
      - :: run-steps

  #----------------------------------------------------------------------------
  arm:
    :: setup-job("gcc" "arm")
    name: arm/c++${{matrix.std}}/${{matrix.bt}}
    :: runs-on-docker-c4core('18.04')
    strategy:
      fail-fast: false
      matrix:
        include:
          # these jobs take much longer, so run only one bitlink pair per job to profit from parallelism
          - {std: 11, bt: Debug  , toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
          - {std: 11, bt: Release, toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
          - {std: 14, bt: Debug  , toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
          - {std: 14, bt: Release, toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
          - {std: 17, bt: Debug  , toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
          - {std: 17, bt: Release, toolchain: cmake/Toolchain-Arm-ubuntu.cmake, cxx: arm-linux-gnueabihf-gcc}
    env:: -{'TOOLCHAIN' '${{matrix.toolchain}}'} +
          load('share/env.yaml')
    steps:
      - :: checkout-manual
      - name: install gcc-arm-linux-gnueabihf
        run: |
          c4core-install arm-linux-gnueabihf
          c4core-install qemu
      - {name: show info, run: source .github/setenv.sh && c4_show_info}
      - name: configure---------------------------------------------------
        run: source .github/setenv.sh && c4_cfg_test arm
      - {name: build, run: source .github/setenv.sh && c4_build_test arm}
      - {name: run, run: source .github/setenv.sh && c4_run_test arm}
      - {name: pack, run: source .github/setenv.sh && c4_package arm}
