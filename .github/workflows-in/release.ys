!yamlscript/v0:

:use common: :all
:workflow-setup 'release'::
  push:
    tags: [v0.*, v1.*, v2.*]
    branches: [master]

# useful to iterate when fixing the release:
# ver=0.2.1 ; ( set -x ; git tag -d v$ver ; git push origin :v$ver ) ; (set -x ; set -e ; tbump --only-patch --non-interactive $ver ; git add -u ; git commit --amend --no-edit ; git tag --annotate --message "v$ver" "v$ver" ; git push -f --tags origin )

jobs:

  gettag:
    :: setup-job('release' 'gettag')
    runs-on: ubuntu-latest
    steps:
    - :: checkout-action
    - :: version-discover

  #----------------------------------------------------------------------------
  # create source packages
  src:
    :: setup-job('release' 'src')
    needs: gettag
    runs-on: ubuntu-latest
    steps:
    - :: checkout-action
    - :: version-get-vars
    - name: Install python 3.9
      uses: actions/setup-python@v5
      with: { python-version: 3.9 }
    - name: Install requirements
      run: |
        sudo -E pip install git-archive-all
    - name: Create source packages
      run: |
        pwd
        ls -lFhp
        source vars.sh
        echo SRC_TAG=$SRC_TAG
        echo SRC_VERSION=$SRC_VERSION
        id=${PROJ_PKG_NAME}${SRC_VERSION}
        name=${id}-src
        mkdir -p assets
        git-archive-all --prefix $name assets/$name.tgz
        git-archive-all --prefix $name assets/$name.zip
        python --version
        python tools/amalgamate.py assets/$id.hpp
    - name: Save source artifacts
      uses: actions/upload-artifact@v4
      with: {name: assets-src, path: assets}

  #----------------------------------------------------------------------------
  # create c++ packages
  cpp:
    name: cpp/${{matrix.os}}/${{matrix.gen}}
    needs: gettag
    runs-on: ${{matrix.os}}
    env: {DEV: OFF, BT: Release, OS: "${{matrix.os}}", CXX_: "${{matrix.cxx}}", GEN: "${{matrix.gen}}"}
    strategy:
      fail-fast: false
      matrix:
        include:
          #  name of the artifact    | suffix (gen)                   | suffix (package)         | cpack gen | mime type                      | os              | cxx
          - {name: Ubuntu 24.04 deb  , sfxg: unix64-shared-Release.deb, sfxp: ubuntu-24.04.deb   , gen: DEB  , mime: vnd.debian.binary-package, os: ubuntu-24.04             }
          - {name: Ubuntu 22.04 deb  , sfxg: unix64-shared-Release.deb, sfxp: ubuntu-22.04.deb   , gen: DEB  , mime: vnd.debian.binary-package, os: ubuntu-22.04             }
          - {name: Windows VS2022 zip, sfxg: win64-shared-Release.zip , sfxp: windows-vs2022.zip , gen: ZIP  , mime: zip                      , os: windows-2022, cxx: vs2022}
          - {name: Windows VS2019 zip, sfxg: win64-shared-Release.zip , sfxp: windows-vs2019.zip , gen: ZIP  , mime: zip                      , os: windows-2019, cxx: vs2019}
          - {name: MacOSX sh         , sfxg: apple64-shared-Release.sh, sfxp: macosx-xcode.sh    , gen: STGZ , mime: x-sh                     , os: macos-13    , cxx: xcode }
    steps:
    - :: checkout-action
    - :: version-get-vars
    - {name: install requirements, run: source .github/reqs.sh && c4_install_test_requirements $OS}
    - {name: show info, run: source .github/setenv.sh && c4_show_info }
    - name: shared64-configure---------------------------------------------------
      run: source .github/setenv.sh && c4_cfg_test shared64
    - {name: shared64-build, run: source .github/setenv.sh && c4_build_target shared64}
    - name: shared64-pack
      run: source .github/setenv.sh && c4_package shared64 $GEN
    - name: shared64-normalize
      run: |
        set -x
        source vars.sh
        ls -lFhp .
        ls -lFhp ./build
        ls -lFhp ./build/shared64
        mkdir -p assets
        asset_src=`ls -1 ./build/shared64/${PROJ_PFX_TARGET}*-${{matrix.sfxg}}`
        asset_dst=./assets/${PROJ_PKG_NAME}${SRC_VERSION}-${{matrix.sfxp}}
        [ ! -f $asset_src ] && exit 1
        cp -fav $asset_src $asset_dst
    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with: {name: "assets-cpp-${{matrix.os}}-${{matrix.cxx}}", path: assets}

  #----------------------------------------------------------------------------
  merge_artifacts:
    :: setup-job('release' 'merge_artifacts')
    runs-on: ubuntu-latest
    needs: [src, cpp]
    steps:
    - name: Merge assets artifacts
      uses: actions/upload-artifact/merge@v4
      with:
        name: assets
        pattern: assets-*
        separate-directories: true
        delete-merged: true

  #----------------------------------------------------------------------------
  release:
    runs-on: ubuntu-latest
    needs:
    - merge_artifacts
    steps:
    - :: checkout-action
    - name: Gather artifacts - ./assets
      uses: actions/download-artifact@v4
      with: {name: assets, pattern: assets}
    - name: Verify existing artifacts
      run: |
        ls -lFhp .
        ls -lFhp assets*/ || echo 'none found'
        ( \
          mkdir -p assets
          cd assets ; \
          for asset in ../assets-*/ ; do \
            ls -lFhpA $asset/ ; \
            mv -v $asset/* . ; \
            rmdir $asset ; \
          done ;
        )
        ls -lFhp assets*/ || echo 'none found'
    #
    # Github
    - :: version-get-vars
    - name: Create Github Release
      if: contains(github.ref, 'tags/v')
      id: create_release
      uses: actions/create-release@v1
      env: { GITHUB_TOKEN: "${{secrets.GITHUB_TOKEN}}" }
      with:
        tag_name: ${{github.ref}}
        release_name: Release ${{env.SRC_VERSION}}
        body_path: ${{env.SRC_VERSION_BODY}}
        draft: true
        prerelease: ${{contains(github.ref, 'rc')}}
    - name: Upload assets to Github Release
      if: contains(github.ref, 'tags/v')
      uses: dwenegar/upload-release-assets@v1
      env: { GITHUB_TOKEN: "${{secrets.GITHUB_TOKEN}}" }
      with:
        release_id: ${{steps.create_release.outputs.id}}
        assets_path: ./assets/
